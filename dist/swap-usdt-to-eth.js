"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const viem_1 = require("viem");
const chains_1 = require("viem/chains");
const accounts_1 = require("viem/accounts");
const dotenv_1 = require("dotenv");
(0, dotenv_1.config)();
const PRIVATE_KEY = process.env.PRIVATE_KEY;
if (!PRIVATE_KEY) {
    throw new Error("PRIVATE_KEY not found in environment variables");
}
const account = (0, accounts_1.privateKeyToAccount)(`0x${PRIVATE_KEY}`);
const publicClient = (0, viem_1.createPublicClient)({
    chain: chains_1.bscTestnet,
    transport: (0, viem_1.http)()
});
const walletClient = (0, viem_1.createWalletClient)({
    account,
    chain: chains_1.bscTestnet,
    transport: (0, viem_1.http)()
});
// ÂêàÁ∫¶Âú∞ÂùÄ
const PANCAKE_ROUTER = "0xD99D1c33F9fC3444f8101754aBC46c52416550D1";
const WBNB = "0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd";
const USDT = "0x337610d27c682E347C9cD60BD4b3b107C9d34dDd";
const ETH = "0x8babbb98678facc7342735486c851abd7a0d17ca";
// Ë∑ØÁî±Âô® ABI
const ROUTER_ABI = [
    {
        "inputs": [
            { "internalType": "uint256", "name": "amountIn", "type": "uint256" },
            { "internalType": "uint256", "name": "amountOutMin", "type": "uint256" },
            { "internalType": "address[]", "name": "path", "type": "address[]" },
            { "internalType": "address", "name": "to", "type": "address" },
            { "internalType": "uint256", "name": "deadline", "type": "uint256" }
        ],
        "name": "swapExactTokensForTokens",
        "outputs": [
            { "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            { "internalType": "uint256", "name": "amountIn", "type": "uint256" },
            { "internalType": "address[]", "name": "path", "type": "address[]" }
        ],
        "name": "getAmountsOut",
        "outputs": [
            { "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }
        ],
        "stateMutability": "view",
        "type": "function"
    }
];
// ERC20 ABI
const ERC20_ABI = [
    {
        "inputs": [
            { "internalType": "address", "name": "spender", "type": "address" },
            { "internalType": "uint256", "name": "amount", "type": "uint256" }
        ],
        "name": "approve",
        "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            { "internalType": "address", "name": "owner", "type": "address" },
            { "internalType": "address", "name": "spender", "type": "address" }
        ],
        "name": "allowance",
        "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
        "stateMutability": "view",
        "type": "function"
    }
];
function approveToken(tokenAddress, spenderAddress, amount) {
    return __awaiter(this, void 0, void 0, function* () {
        const currentAllowance = yield publicClient.readContract({
            address: tokenAddress,
            abi: ERC20_ABI,
            functionName: "allowance",
            args: [account.address, spenderAddress]
        });
        if (currentAllowance < amount) {
            console.log(`üîì ÊâπÂáÜ ${tokenAddress} ‰ΩøÁî®ÊùÉÈôê...`);
            const { request } = yield publicClient.simulateContract({
                address: tokenAddress,
                abi: ERC20_ABI,
                functionName: "approve",
                args: [spenderAddress, amount],
                account
            });
            const approvalHash = yield walletClient.writeContract(request);
            console.log(`‚úÖ ÊâπÂáÜ‰∫§ÊòìÂìàÂ∏å: ${approvalHash}`);
            yield publicClient.waitForTransactionReceipt({
                hash: approvalHash
            });
            console.log("‚úÖ ÊâπÂáÜÂÆåÊàê");
        }
        else {
            console.log("‚úÖ ‰ª£Â∏ÅÂ∑≤Ëé∑ÂæóË∂≥Â§üÁöÑ‰ΩøÁî®ÊùÉÈôê");
        }
    });
}
function swapUSDTToETH() {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            console.log("üîÑ ÂºÄÂßã USDT ‚Üí WBNB ‚Üí ETH Â§öË∑≥‰∫§Êòì");
            console.log("=".repeat(50));
            const amountIn = (0, viem_1.parseUnits)("1", 18); // 1 USDT
            const path = [USDT, WBNB, ETH];
            const slippage = 0.5; // 0.5% ÊªëÁÇπ
            console.log("‰∫§ÊòìÂèÇÊï∞:");
            console.log(`   ËæìÂÖ•: ${(0, viem_1.formatUnits)(amountIn, 18)} USDT`);
            console.log(`   Ë∑ØÂæÑ: USDT ‚Üí WBNB ‚Üí ETH`);
            console.log(`   ÊªëÁÇπ: ${slippage}%`);
            // 1. Ëé∑ÂèñÈ¢ÑÊúüËæìÂá∫
            const amounts = yield publicClient.readContract({
                address: PANCAKE_ROUTER,
                abi: ROUTER_ABI,
                functionName: "getAmountsOut",
                args: [amountIn, path]
            });
            const expectedAmountOut = amounts[2]; // ETH ËæìÂá∫Èáè
            const minAmountOut = expectedAmountOut * BigInt(Math.floor((100 - slippage) * 100)) / BigInt(10000);
            console.log(`üí∏ È¢ÑÊúüËæìÂá∫: ${(0, viem_1.formatUnits)(expectedAmountOut, 18)} ETH`);
            console.log(`üõ°Ô∏è ÊúÄÂ∞èËæìÂá∫: ${(0, viem_1.formatUnits)(minAmountOut, 18)} ETH`);
            // 2. ÊâπÂáÜ USDT
            yield approveToken(USDT, PANCAKE_ROUTER, amountIn);
            // 3. ÊâßË°å‰∫§Êòì
            const deadline = BigInt(Math.floor(Date.now() / 1000) + 1800); // 30ÂàÜÈíüÂêéËøáÊúü
            console.log("\nüöÄ ÊâßË°åÂ§öË∑≥‰∫§Êòì...");
            const { request } = yield publicClient.simulateContract({
                address: PANCAKE_ROUTER,
                abi: ROUTER_ABI,
                functionName: "swapExactTokensForTokens",
                args: [
                    amountIn,
                    minAmountOut,
                    path,
                    account.address,
                    deadline
                ],
                account
            });
            const txHash = yield walletClient.writeContract(request);
            console.log(`‚úÖ ‰∫§ÊòìÂ∑≤ÂèëÈÄÅ: ${txHash}`);
            // 4. Á≠âÂæÖÁ°ÆËÆ§
            console.log("‚è≥ Á≠âÂæÖ‰∫§ÊòìÁ°ÆËÆ§...");
            const receipt = yield publicClient.waitForTransactionReceipt({
                hash: txHash
            });
            console.log(`üéâ ‰∫§ÊòìÊàêÂäüÁ°ÆËÆ§!`);
            console.log(`   Âå∫ÂùóÂè∑: ${receipt.blockNumber}`);
            console.log(`   Gas ‰ΩøÁî®Èáè: ${receipt.gasUsed}`);
            console.log("=".repeat(50));
            console.log("üîç ËØ∑ËøêË°å‰ΩôÈ¢ùÊ£ÄÊü•ËÑöÊú¨È™åËØÅ ETH ‰ΩôÈ¢ùÂèòÂåñ:");
            console.log("   npm run build && node dist/check-balance.js");
        }
        catch (error) {
            console.error("‚ùå Â§öË∑≥‰∫§ÊòìÂ§±Ë¥•:", error);
        }
    });
}
swapUSDTToETH();
